# This is a Kubernetes manifest that runs a local Elastic Stack comprised of
# Elasticsearch, Kibana and Elastic Distribution of OpenTelemetry (EDOT)
# Collector.
#
# This has the same configuration as ../docker/docker-compose-elastic.yml
#
# For this reason, if trying to understand why a setting exists, look at the
# docker variant first. Similarly, updates to the docker variant should happen
# here as well.

---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
spec:
  ports:
    - port: 9200
      targetPort: 9200
  selector:
    app: elasticsearch

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      containers:
        - name: elasticsearch
          image: docker.elastic.co/elasticsearch/elasticsearch:9.0.2
          ports:
            - containerPort: 9200
          env:
            - name: node.name
              value: elasticsearch
            - name: cluster.name
              value: k8s-cluster
            - name: discovery.type
              value: single-node
            - name: ELASTIC_PASSWORD
              value: elastic
            - name: bootstrap.memory_lock
              value: "true"
            - name: xpack.security.enabled
              value: "true"
            - name: xpack.security.http.ssl.enabled
              value: "false"
            - name: xpack.security.transport.ssl.enabled
              value: "false"
            - name: xpack.license.self_generated.type
              value: trial
            # Note that ELSER is recommended to have 2GB, but it is JNI (PyTorch).
            # So, ELSER's memory is in addition to the heap and other overhead.
            - name: ES_JAVA_OPTS
              value: "-Xms2g -Xmx2g"
          securityContext:
            capabilities:
              add: ["CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID"]
              drop: ["ALL"]
          readinessProbe:
            exec:
              # Readiness probe adapted from the Docker healthcheck script.
              command: ["sh", "-c", "curl --max-time 1 -s http://localhost:9200 | grep -q 'missing authentication credentials'"]
            initialDelaySeconds: 10
            periodSeconds: 1
            timeoutSeconds: 10
            failureThreshold: 120

---
apiVersion: v1
kind: Service
metadata:
  name: kibana
spec:
  ports:
    - port: 5601
      targetPort: 5601
  selector:
    app: kibana

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
    spec:
      initContainers:
        # gen-ai assistants in kibana save state in a way that requires system
        # access, so set kibana_system's password to a known value.
        - name: setup-kibana-system-user
          image: docker.elastic.co/elasticsearch/elasticsearch:9.0.2
          command:
            - bash
            - -c
            - |
              echo "Setup the kibana_system password";
              until curl --max-time 1 -s -u "elastic:elastic" \
                -X POST http://elasticsearch.default.svc:9200/_security/user/kibana_system/_password \
                -d "{\"password\":\"elastic\"}" \
                -H "Content-Type: application/json" | grep -q "^{}"; do sleep 5; done;
      containers:
        - name: kibana
          image: docker.elastic.co/kibana/kibana:9.0.2
          ports:
            - containerPort: 5601
          env:
            - name: SERVERNAME
              value: kibana
            - name: ELASTICSEARCH_HOSTS
              value: http://elasticsearch.default.svc:9200
            - name: ELASTICSEARCH_USERNAME
              value: kibana_system
            - name: ELASTICSEARCH_PASSWORD
              value: elastic
            # Non-default settings from here:
            # https://github.com/elastic/apm-server/blob/main/testing/docker/kibana/kibana.yml
            - name: MONITORING_UI_CONTAINER_ELASTICSEARCH_ENABLED
              value: "true"
            - name: XPACK_SECURITY_ENCRYPTIONKEY
              value: fhjskloppd678ehkdfdlliverpoolfcr
            - name: XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY
              value: fhjskloppd678ehkdfdlliverpoolfcr
            - name: SERVER_HOST
              value: 0.0.0.0
            - name: SERVER_PUBLICBASEURL
              value: http://127.0.0.1:5601
          readinessProbe:
            exec:
              command: ["sh", "-c", "curl --max-time 1 -s http://localhost:5601/api/status | grep -q 'available'"]
            initialDelaySeconds: 1
            periodSeconds: 1
            failureThreshold: 300

---
# This is the minimal yaml configuration needed to listen on all interfaces for
# OTLP logs, metrics and traces, exporting to Elasticsearch.
apiVersion: v1
kind: ConfigMap
metadata:
  name: edot-collector-config
data:
  config.yaml: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
    connectors:
      elasticapm:
    processors:
      elastictrace:
    exporters:
      elasticsearch:
        endpoint: http://elasticsearch.default.svc:9200
        user: elastic
        password: elastic
        mapping:
          mode: otel
        logs_dynamic_index:
          enabled: true
        metrics_dynamic_index:
          enabled: true
        traces_dynamic_index:
          enabled: true
        flush:
          interval: 1s  # improve responsiveness in example apps (default 30s)
    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: [elastictrace]
          exporters: [elasticapm, elasticsearch]
        metrics:
          receivers: [otlp]
          processors: []
          exporters: [elasticsearch]
        metrics/aggregated:
          receivers: [elasticapm]
          processors: []
          exporters: [elasticsearch]
        logs:
          receivers: [otlp]
          processors: []
          exporters: [elasticapm, elasticsearch]

---
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
spec:
  ports:
    - name: grpc
      port: 4317
      targetPort: 4317
    - name: http
      port: 4318
      targetPort: 4318
  selector:
    app: otel-collector

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: otel-collector
spec:
  replicas: 1
  selector:
    matchLabels:
      app: otel-collector
  template:
    metadata:
      labels:
        app: otel-collector
    spec:
      containers:
        - name: otel-collector
          image: docker.elastic.co/elastic-agent/elastic-otel-collector:9.0.2
          command: ["/usr/bin/tini", "--"]
          args: ["/usr/local/bin/docker-entrypoint", "--config=/usr/share/elastic-agent/config.yaml"]
          volumeMounts:
            - name: config
              mountPath: /usr/share/elastic-agent/config.yaml
              subPath: config.yaml
          ports:
            - containerPort: 4317
            - containerPort: 4318
          readinessProbe:
            tcpSocket:
              port: 4317
            initialDelaySeconds: 1
            periodSeconds: 1
            failureThreshold: 300
          securityContext:
            capabilities:
              add: [ "CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID" ]
              drop: [ "ALL" ]
      volumes:
        - name: config
          configMap:
            name: edot-collector-config
